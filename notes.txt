Sure! Here's a concise summary of what you did:

Pointed your domain dev.xyz to your AWS VPS IP using GoDaddy DNS.

Installed and configured NGINX to reverse proxy requests from port 80/443 to your Node.js app on port 3000.

Opened necessary ports (80, 443) on AWS Security Group and Ubuntu UFW firewall.

Used Certbot to install a free SSL certificate and enable HTTPS on your domain.

Successfully routed https://dev.xyz/api/data to your backend securely via NGINX. âœ…




return (
  <div className="flex flex-col h-screen w-full bg-black p-4">

    {/* Header */}
    <div className="w-full mb-1 p-0 bg-black">
      <div className="relative text-center mt-2">
        <h1 className="text-1xl md:text-2xl lg:text-4xl font-bold text-transparent bg-clip-text bg-gradient-to-br from-fuchsia-500 via-purple-500 drop-shadow-[0_0_15px_rgba(200,100,255,0.6)]">
          A N I M O N A&nbsp;  
          <span className="relative w-[3rem] h-[3rem] inline-block align-middle ml-2">
            <img
              src="/monanimals/cool_salmonad.png"
              alt="D"
              className="absolute inset-0 object-contain w-full h-full animate-bounce drop-shadow-[0_0_10px_rgba(200,0,255,0.7)]"
            />
          </span>
        </h1>
      </div>
    </div>

    {/* Main Container */}
    <div className="flex flex-col lg:flex-row gap-6 items-stretch min-w-0 flex-grow overflow-hidden">

      {/* Left Container */}
      <div className="flex-1 flex flex-col bg-black text-white overflow-hidden rounded-xl">

        {/* Top Metric Box */}
        {blockNumber && gasUsed && gasLimit && volume && tps && (
          <div className="m-2 p-2 rounded-xl bg-black">
            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4">
              {/* Block Number */}
              <div className="flex flex-col items-center space-y-1 w-full">
                <div className="relative w-full h-6 bg-gray-950 border border-purple-400 rounded-lg overflow-hidden shadow-[0_0_8px_#a78bfa]">
                  <div className="h-full bg-purple-500/80 w-full" />
                  <div className="absolute inset-0 flex items-center justify-center">
                    <span className="text-xs text-purple-100 font-semibold">
                      #{blockNumber}
                    </span>
                  </div>
                </div>
                <div className="text-white text-xs mt-1">ðŸ§± Block</div>
              </div>

              {/* Volume */}
              <div className="flex flex-col items-center space-y-1 w-full">
                <div className="relative w-full h-6 bg-gray-950 border border-indigo-400 rounded-lg overflow-hidden shadow-[0_0_8px_#818cf8]">
                  <div className="h-full bg-indigo-500/80 w-full" />
                  <div className="absolute inset-0 flex items-center justify-center">
                    <span className="text-xs text-indigo-100 font-semibold">
                      {formatValue(volume)} MON
                    </span>
                  </div>
                </div>
                <div className="text-white text-xs mt-1">ðŸ’° Volume/s</div>
              </div>

              {/* Gas Usage */}
              <div className="flex flex-col items-center space-y-1 w-full">
                <div
                  className="relative w-full h-6 bg-gray-900 border border-pink-500 rounded-lg overflow-hidden shadow-[0_0_8px_#ec4899]"
                  title={`â›½ ${Number(BigInt(gasUsed) / BigInt(1e6)).toLocaleString()} / ${Number(BigInt(gasLimit) / BigInt(1e6)).toLocaleString()} Mwei/s`}
                >
                  <div
                    className="h-full bg-pink-500 transition-all duration-500"
                    style={{
                      width: `${Math.min((Number(gasUsed) / Number(gasLimit)) * 100, 100)}%`,
                    }}
                  />
                  <div className="absolute right-0 top-0 h-full w-12 bg-black/30 flex items-center justify-end pr-2">
                    <span className="text-xs text-pink-200 drop-shadow-[0_0_2px_#ec4899]">
                      {((Number(gasUsed) / Number(gasLimit)) * 100).toFixed(0)}%
                    </span>
                  </div>
                </div>
                <div className="text-white text-xs mt-1">
                  â›½ {(BigInt(gasUsed) / BigInt(1e6)).toString()} Mwei/s
                </div>
              </div>

              {/* TPS */}
              <div className="flex flex-col items-center space-y-1 w-full">
                <div
                  className="relative w-full h-6 bg-gray-900 border border-lime-400 rounded-lg overflow-hidden shadow-[0_0_8px_#84cc16]"
                  title={`âš¡ ${tps.toLocaleString()} TPS / 10,000`}
                >
                  <div
                    className="h-full bg-lime-400 transition-all duration-500"
                    style={{
                      width: `${Math.min((tps / 10000) * 100, 100)}%`,
                    }}
                  />
                  <div className="absolute right-0 top-0 h-full w-12 bg-black/30 flex items-center justify-end pr-2">
                    <span className="text-xs text-lime-200 drop-shadow-[0_0_2px_#84cc16]">
                      {Math.min((tps / 10000) * 100, 100).toFixed(0)}%
                    </span>
                  </div>
                </div>
                <div className="text-white text-xs mt-1">âš¡ {tps} TPS</div>
              </div>
            </div>
          </div>
        )}

        {/* Graph Container */}
        <div className="flex-grow m-2 p-3 rounded-xl bg-black/80 shadow-[0_0_30px_#9333ea80] flex flex-col h-full min-h-0">
          <div className="flex-shrink-0 flex justify-between items-center text-white px-4 pb-2 min-h-[60px]">
            <h2 className="text-xl font-semibold"></h2>
            <a
              href="https://docs.google.com/spreadsheets/d/11vji0UhVjwzCRdvb8TXzBo5jSl0X_i-p0xP5rRgjui4/edit?gid=715484899#gid=715484899"
              target="_blank"
              rel="noopener noreferrer"
              className="text-violet-400 hover:text-violet-300 transition-colors"
            >
            </a>
          </div>

          <div className="flex-1 flex flex-col justify-end px-2 pb-4 w-full h-full">
          
          {/* Bar Chart */}
          <div className="flex-1 flex flex-col justify-end px-2 pb-4 w-full h-full">
            {barTot.every(val => val === 0) ? (
              <div className="text-white text-xs flex items-center justify-center w-full h-full">
                No data available
              </div>
            ) : (
              <div className="flex justify-around items-end w-full h-full">
                {categoryData.map((item, idx) => {
                  const value = barTot[idx] || 0;
                  const maxValue = Math.max(...barTot, 1);
                  const heightPercent = (value / maxValue) * (100 * (5 / 6));
                  const change = percentageBarChange?.[idx] ?? 0;
                  const isTop = value === maxValue;

                  return (
                    <div key={idx} className="flex flex-col items-center w-20 h-full">
                      <div className="relative w-full flex items-end justify-center h-full">
                        {/* Bar with image background */}
                        <div
                          className={`w-10 rounded-t-xl bg-cover bg-center transition-all duration-700 ${
                            isTop ? "drop-shadow-[0_0_15px_rgba(255,255,255,0.8)] scale-105" : ""
                          }`}
                          style={{
                            height: `${heightPercent}%`,
                            zIndex: 1,
                            backgroundImage: `url(${item.bgImg})`, 
                          }}
                        />

                        <div
                          className="absolute flex flex-col items-center transition-all duration-700"
                          style={{
                            bottom: `${heightPercent}%`,
                            transform: "translateY(-10%)",
                            zIndex: 2,
                          }}
                        >
                          <img
                            src={change >= 0 ? item.happyImg : item.sadImg}
                            alt={item.label}
                            className={`transition-all duration-500 ${
                              isTop ? "w-16 h-16" : "w-12 h-12 opacity-80"
                            }`}
                          />
                          <div className="text-xs font-bold text-white mt-1 flex items-center space-x-1">
                            <span>{value}</span>
                            <span
                              className={`text-sm ${
                                change > 0 ? "text-green-400" : change < 0 ? "text-red-400" : "text-gray-400"
                              }`}
                            >
                              {change > 0 ? "â–²" : change < 0 ? "â–¼" : "â€“"}
                            </span>
                          </div>
                        </div>
                      </div>

                      <div className="text-xs text-white font-semibold mt-2 text-center">{item.label}</div>
                    </div>
                  );
                })}
              </div>
              )}
            </div>

            {/* Caption */}
            <div className="flex-shrink-0 flex justify-between items-center text-xs text-white px-4 py-2">
              <button
                onClick={() => setIsPlaying((prev) => !prev)}
                aria-label="Play/Pause"
              >
                <img src={isPlaying ? "/sounds/pause.png" : "/sounds/play.png"} alt="Play/Pause" className="w-13 ml-0" />
              </button>
              <span className="flex-1 text-center font-bold text-lg">ðŸŒˆ TPS vs Categories</span>
              <a
                href="https://docs.google.com/spreadsheets/d/11vji0UhVjwzCRdvb8TXzBo5jSl0X_i-p0xP5rRgjui4/edit?gid=715484899#gid=715484899"
                target="_blank"
                rel="noopener noreferrer"
                className="text-violet-400 hover:text-violet-300 transition-colors mr-3"
              >
                ðŸ”—
              </a>
          </div>
          </div>
        </div>
      </div>
  
          {/* Right Container */}
          <div className="flex-1 flex flex-col p-0 bg-black text-white rounded-2xl min-h-0">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4 w-full h-full min-h-0">

              {/* Top dApps */}
              <div className="flex flex-col h-full overflow-hidden min-h-0 bg-gradient-to-br from-pink-900/60 via-purple-900/70 to-black/80 p-3 rounded-xl shadow-[0_0_15px_#9333ea80] border border-pink-300/10 backdrop-blur text-xs">
                <h2 className="text-white text-lg font-semibold mb-2 shrink-0">ðŸ’»&nbsp; Most&nbsp; used&nbsp; dApps</h2>
                <div className="flex-1 overflow-hidden min-h-0 relative">
                  <table className="w-full table-fixed text-white text-xs border-separate border-spacing-0">
                    <thead>
                      <tr className="bg-pink-800/20 text-pink-200">
                        <th className="text-left px-2 py-1 w-10 border-b border-pink-400/20"></th>
                        <th className="text-left px-2 py-1 border-b border-pink-400/20">Name</th>
                        <th className="text-right px-2 py-1 w-12 border-b border-pink-400/20">TPS</th>
                      </tr>
                    </thead>
                    <tbody>
                      {topDapps?.map(([name, tps], idx) => (
                        <tr
                          key={idx}
                          className="hover:bg-pink-700/10 transition-all duration-150"
                          style={{ height: "32px" }}
                        >
                          <td className="px-2 py-1 border-b border-pink-300/10">
                            {logos?.[name as keyof typeof logos] ? (
                              <img src={logos[name as keyof typeof logos]} alt={name} className="w-5 h-5 rounded-lg" />
                            ) : (
                              <span className="text-pink-300 text-xs">N/A</span>
                            )}
                          </td>
                          <td className="px-2 py-1 border-b border-pink-300/10 truncate">
                            {urls?.[name as keyof typeof urls] ? (
                              <a
                                href={urls[name as keyof typeof urls]}
                                target="_blank"
                                rel="noopener noreferrer"
                              >
                                {name}
                              </a>
                            ) : (
                              <span className="text-pink-300 text-xs">N/A</span>
                            )}

                          </td>
                          <td className="px-2 py-1 border-b border-pink-300/10 text-right">
                            {tps}
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>

              {/* Latest Transactions */}
              <div className="flex flex-col h-full overflow-hidden min-h-0 bg-gradient-to-br from-purple-900/60 via-pink-900/70 to-black/80 p-3 rounded-xl shadow-[0_0_15px_#9333ea80] border border-purple-300/10 backdrop-blur text-xs">
                <h2 className="text-white text-lg font-semibold mb-2 shrink-0">ðŸ’µ&nbsp; Latest&nbsp; TXs</h2>
                <div className="flex-1 overflow-hidden min-h-0 relative">
                  <table className="w-full table-fixed text-white text-xs border-separate border-spacing-0">
                    <thead>
                      <tr className="bg-purple-800/20 text-purple-200">
                        <th className="text-left px-2 py-1 w-36 border-b border-purple-400/20">Hash</th>
                        <th className="text-right px-2 py-1 w-16 border-b border-purple-400/20">MON</th>
                      </tr>
                    </thead>
                    <tbody>
                      {latestTxs?.map((tx, idx) => (
                        <tr
                          key={idx}
                          className="hover:bg-purple-700/10 transition-all duration-150"
                          style={{ height: "32px" }}
                        >
                          <td className="px-2 py-1 border-b border-purple-300/10 truncate">
                            <a
                              href={`https://testnet.monadexplorer.com/tx/${tx.hash}`}
                              target="_blank"
                              rel="noopener noreferrer"
                              className="hover:text-purple-300 block truncate text-purple-100"
                            >
                              {tx.hash.slice(0, 6)}...{tx.hash.slice(-6)}
                            </a>
                          </td>
                          <td className="px-2 py-1 border-b border-purple-300/10 text-right text-purple-100">
                            {formatValue(tx.value)}
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>

            </div>
          </div>
        </div>

        {/* Footer */}
        <div className="w-full mt-4 p-0 bg-black">
          <div className="relative text-center mt-2">
            <h1 className="text-xs text-transparent bg-clip-text bg-gradient-to-br from-fuchsia-500 via-purple-500 drop-shadow-[0_0_15px_rgba(200,100,255,0.6)]">
              Built by <a href="https://x.com/Samruddhi_Krnr" target="_blank" rel="noopener noreferrer" className="underline hover:text-purple-300">Samk</a>
            </h1>
          </div>
        </div>

      </div>
  );
}